---
# tasks file for roles/docker docker_compose
- community.docker.docker_compose:
    project_name: "{{ project.name }}"
    definition:
      version: "{{ project.definition.version }}"
      services:
        vault:
          # command: "server"
          image: "{{ project.definition.services.vault.image }}"
          restart: "{{ project.definition.services.vault.restart }}"
          container_name: "{{ project.definition.services.vault.container_name }}"
          # user: '{{ project.definition.services.vault.user.id }}:{{ project.definition.services.vault.user.group }}'
          cap_add:
            - "{{ project.definition.services.vault.cap_add }}"
          ports:
            - "{{ project.definition.services.vault.vault_api_port }}:{{ project.definition.services.vault.vault_api_port }}"
            - "{{ project.definition.services.vault.vault_console_port }}:{{ project.definition.services.vault.vault_console_port }}"
          healthcheck:
            timeout: "{{ project.definition.services.vault.healthcheck.timeout }}"
            retries: "{{ project.definition.services.vault.healthcheck.retries }}"
            interval: "{{ project.definition.services.vault.healthcheck.interval }}"
            start_period: "{{ project.definition.services.vault.healthcheck.start_period }}"
          environment:
            - 'VAULT_TOKEN={{ project.definition.services.vault.secret_password }}'
            - 'VAULT_DEV_ROOT_TOKEN_ID={{ project.definition.services.vault.secret_password }}'
            - 'VAULT_ADDR=http://0.0.0.0:{{ project.definition.services.vault.vault_console_port }}'
          volumes:
            - "{{ ansible_env.HOME }}/{{ prerequisites.dirConfigurations.parentDir }}/{{ prerequisites.project.0.name }}/{{ prerequisites.project.0.dirs.0 }}:/vault/logs"
            - "{{ ansible_env.HOME }}/{{ prerequisites.dirConfigurations.parentDir }}/{{ prerequisites.project.0.name }}/{{ prerequisites.project.0.dirs.1 }}:/vault/file"
            - "{{ ansible_env.HOME }}/{{ prerequisites.dirConfigurations.parentDir }}/{{ prerequisites.project.0.name }}/{{ prerequisites.project.0.dirs.2 }}:/vault/config"
            - "{{ ansible_env.HOME }}/{{ prerequisites.dirConfigurations.parentDir }}/{{ prerequisites.project.0.name }}/{{ prerequisites.project.0.dirs.3 }}:/vault/policies"
            - "{{ ansible_env.HOME }}/{{ prerequisites.dirConfigurations.parentDir }}/{{ prerequisites.project.0.name }}/{{ prerequisites.project.0.dirs.4 }}:/vault/certs"
        s3:
          image: "{{ project.definition.services.s3.image }}"
          restart: "{{ project.definition.services.s3.restart }}"
          container_name: "{{ project.definition.services.s3.container_name }}"
          command: "server /data --certs-dir .minio/certs --console-address ':{{ project.definition.services.s3.s3_console_port }}'"
          # user: "{{ project.definition.services.s3.user.id }}:{{ project.definition.services.s3.user.group }}"
          healthcheck:
            test: [ "CMD", "curl", "-IfL", "--cacert", ".minio/certs/{{ prerequisites.cert.crt }}", "https://localhost:{{ project.definition.services.s3.s3_console_port }}" ]
            timeout: "{{ project.definition.services.s3.healthcheck.timeout }}"
            retries: "{{ project.definition.services.s3.healthcheck.retries }}"
            interval: "{{ project.definition.services.s3.healthcheck.interval }}"
            start_period: "{{ project.definition.services.s3.healthcheck.start_period }}"
          environment:
            - "MINIO_ROOT_USER={{ project.definition.services.s3.access_key }}"
            - "MINIO_ROOT_PASSWORD={{ project.definition.services.s3.secret_key }}"
          # - "MINIO_CERT_PASSWD={{ project.definition.services.cert.passphrase }}"
            - "MINIO_STORAGE_CLASS_STANDARD={{ project.definition.services.s3.storage_class }}"
          volumes:
            - "{{ ansible_env.HOME }}/{{ prerequisites.dirConfigurations.parentDir }}/{{ prerequisites.project.1.name }}/{{ prerequisites.project.1.dirs.0 }}:/data"
            - "{{ ansible_env.HOME }}/{{ prerequisites.dirConfigurations.parentDir }}/{{ prerequisites.project.1.name }}/{{ prerequisites.project.1.dirs.1 }}:/.minio/certs"
          ports:
            - "{{ project.definition.services.s3.s3_api_port }}:{{ project.definition.services.s3.s3_api_port }}"
            - "{{ project.definition.services.s3.s3_console_port }}:{{ project.definition.services.s3.s3_console_port }}"
  register: output

- ansible.builtin.assert:
    that:
      - "output.services.s3.{{ project.definition.services.s3.container_name }}.state.running"
      - "output.services.vault.{{ project.definition.services.vault.container_name }}.state.running"

- name: Pause play until {{ project.definition.services.vault.container_name }} URL is reachable from this host
  ansible.builtin.uri:
    url: "{{ uri.vault.url }}"
    method: "{{ uri.vault.method }}"
    validate_certs: "{{ uri.vault.validate_certs }}"
    follow_redirects: "{{ uri.vault.follow_redirects }}"
  register: _result
  delay: "{{ uri.vault.delay }}"
  until: _result.status == 200
  retries: "{{ uri.vault.retries }}"

- name: Pause play until {{ project.definition.services.s3.container_name }} URL is reachable from this host
  ansible.builtin.uri:
    url: "{{ uri.s3.url }}"
    method: "{{ uri.s3.method }}"
    validate_certs: "{{ uri.s3.validate_certs }}"
    follow_redirects: "{{ uri.s3.follow_redirects }}"
  register: _result
  delay: "{{ uri.s3.delay }}"
  until: _result.status == 200
  retries: "{{ uri.s3.retries }}"

- name: Copy mc client to {{ project.definition.services.vault.container_name }}
  ansible.builtin.shell: "docker cp {{ role_path }}/files/mc {{ project.definition.services.vault.container_name }}:/usr/bin/mc"

# To be used in Prod mode. For the moment we use Dev mode (no need).
#- name: Execute the command in remote shell; stdout goes to the specified file on the remote
#  ansible.builtin.shell: docker logs {{ project.definition.services.vault.container_name }}
#  register: container
#
#- ansible.builtin.debug:
#    var: container.stdout_lines